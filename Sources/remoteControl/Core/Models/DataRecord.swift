import Foundation

struct DataRecord: Identifiable, Codable, Hashable {
    let id: UUID
    var data: [String: AnyCodable]
    let createdAt: Date?
    var updatedAt: Date?
    let serverId: String? // –†–µ–∞–ª—å–Ω—ã–π ID —Å —Å–µ—Ä–≤–µ—Ä–∞
    
    init(data: [String: AnyCodable]) {
        self.id = UUID()
        self.data = data
        self.createdAt = nil
        self.updatedAt = nil
        self.serverId = nil
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: DynamicCodingKey.self)
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID —Å —Å–µ—Ä–≤–µ—Ä–∞
        var actualServerId: String?
        
        if let serverId = try? container.decodeIfPresent(String.self, forKey: DynamicCodingKey(stringValue: "id")) {
            actualServerId = serverId
            // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å UUID –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
            if let uuid = UUID(uuidString: serverId) {
                self.id = uuid
                print("‚úÖ DataRecord: Using server UUID: \(serverId)")
            } else {
                // –ï—Å–ª–∏ –Ω–µ UUID, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π UUID, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π ID
                self.id = UUID()
                print("‚ö†Ô∏è DataRecord: Server ID '\(serverId)' is not UUID, using local: \(self.id), server: \(serverId)")
            }
        } else if let serverIdInt = try? container.decodeIfPresent(Int.self, forKey: DynamicCodingKey(stringValue: "id")) {
            // –ï—Å–ª–∏ ID - —á–∏—Å–ª–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            actualServerId = String(serverIdInt)
            self.id = UUID()
            print("‚ö†Ô∏è DataRecord: Server ID is integer \(serverIdInt), using local: \(self.id), server: \(actualServerId!)")
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç ID, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
            self.id = UUID()
            print("‚ö†Ô∏è DataRecord: No server ID found, generating new: \(self.id)")
        }
        
        self.serverId = actualServerId
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø–æ–ª—è –∫—Ä–æ–º–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö
        var data: [String: AnyCodable] = [:]
        let allKeys = container.allKeys
        
        print("üîç DataRecord: Decoding record with \(allKeys.count) keys: \(allKeys.map { $0.stringValue })")
        
        for key in allKeys {
            if key.stringValue != "id" && key.stringValue != "created_at" && key.stringValue != "updated_at" {
                if let value = try? container.decode(AnyCodable.self, forKey: key) {
                    data[key.stringValue] = value
                    print("‚úÖ DataRecord: Decoded field '\(key.stringValue)': \(value.value)")
                } else {
                    print("‚ùå DataRecord: Failed to decode field '\(key.stringValue)'")
                }
            }
        }
        
        self.data = data
        
        // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        self.createdAt = try? container.decodeIfPresent(Date.self, forKey: DynamicCodingKey(stringValue: "created_at"))
        self.updatedAt = try? container.decodeIfPresent(Date.self, forKey: DynamicCodingKey(stringValue: "updated_at"))
        
        print("üìä DataRecord: Final data has \(data.count) fields, ID: \(self.id)")
    }
    
    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: DynamicCodingKey.self)
        
        // –ù–ï –∫–æ–¥–∏—Ä—É–µ–º ID - —Å–µ—Ä–≤–µ—Ä —Å–∞–º –µ–≥–æ –Ω–∞–∑–Ω–∞—á–∏—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        // ID –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
        
        // –ö–æ–¥–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –æ–±–µ—Ä—Ç–∫–∏ data)
        for (key, value) in data {
            // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            switch value.value {
            case let stringValue as String:
                // –ï—Å–ª–∏ —ç—Ç–æ JSON —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
                if key.contains("json") || key.contains("JSON") {
                    if let jsonData = stringValue.data(using: .utf8),
                       let jsonObject = try? JSONSerialization.jsonObject(with: jsonData) {
                        try container.encode(AnyCodable(jsonObject), forKey: DynamicCodingKey(stringValue: key))
                    } else {
                        try container.encode(stringValue, forKey: DynamicCodingKey(stringValue: key))
                    }
                } else {
                    try container.encode(stringValue, forKey: DynamicCodingKey(stringValue: key))
                }
            case let arrayValue as [Any]:
                try container.encode(AnyCodable(arrayValue), forKey: DynamicCodingKey(stringValue: key))
            case let dictValue as [String: Any]:
                try container.encode(AnyCodable(dictValue), forKey: DynamicCodingKey(stringValue: key))
            default:
                try container.encode(value, forKey: DynamicCodingKey(stringValue: key))
            }
        }
        
        // –ö–æ–¥–∏—Ä—É–µ–º –¥–∞—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if let createdAt = createdAt {
            try container.encode(createdAt, forKey: DynamicCodingKey(stringValue: "created_at"))
        }
        if let updatedAt = updatedAt {
            try container.encode(updatedAt, forKey: DynamicCodingKey(stringValue: "updated_at"))
        }
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å ID (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
    func encodeWithId(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: DynamicCodingKey.self)
        
        // –ö–æ–¥–∏—Ä—É–µ–º ID –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID —Å–µ—Ä–≤–µ—Ä–∞)
        let recordId = serverId ?? id.uuidString
        try container.encode(recordId, forKey: DynamicCodingKey(stringValue: "id"))
        
        // –ö–æ–¥–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –æ–±–µ—Ä—Ç–∫–∏ data)
        for (key, value) in data {
            // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            switch value.value {
            case let stringValue as String:
                // –ï—Å–ª–∏ —ç—Ç–æ JSON —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
                if key.contains("json") || key.contains("JSON") {
                    if let jsonData = stringValue.data(using: .utf8),
                       let jsonObject = try? JSONSerialization.jsonObject(with: jsonData) {
                        try container.encode(AnyCodable(jsonObject), forKey: DynamicCodingKey(stringValue: key))
                    } else {
                        try container.encode(stringValue, forKey: DynamicCodingKey(stringValue: key))
                    }
                } else {
                    try container.encode(stringValue, forKey: DynamicCodingKey(stringValue: key))
                }
            case let arrayValue as [Any]:
                try container.encode(AnyCodable(arrayValue), forKey: DynamicCodingKey(stringValue: key))
            case let dictValue as [String: Any]:
                try container.encode(AnyCodable(dictValue), forKey: DynamicCodingKey(stringValue: key))
            default:
                try container.encode(value, forKey: DynamicCodingKey(stringValue: key))
            }
        }
        
        // –ö–æ–¥–∏—Ä—É–µ–º –¥–∞—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if let createdAt = createdAt {
            try container.encode(createdAt, forKey: DynamicCodingKey(stringValue: "created_at"))
        }
        if let updatedAt = updatedAt {
            try container.encode(updatedAt, forKey: DynamicCodingKey(stringValue: "updated_at"))
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–¥–∏—Ä—É–µ–º—É—é –≤–µ—Ä—Å–∏—é —Å ID
    var encodedWithId: Data? {
        let encoder = JSONEncoder()
        return try? encoder.encode(self)
    }
    
    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å ID
struct DataRecordWithId: Codable {
    let id: String
    let createdAt: Date?
    let updatedAt: Date?
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ encode(to:)
    
    init(record: DataRecord) {
        self.id = record.serverId ?? record.id.uuidString
        self.createdAt = record.createdAt
        self.updatedAt = record.updatedAt
    }
    
    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: DynamicCodingKey.self)
        
        // –ö–æ–¥–∏—Ä—É–µ–º ID
        try container.encode(id, forKey: DynamicCodingKey(stringValue: "id"))
        
        // –ö–æ–¥–∏—Ä—É–µ–º –¥–∞—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if let createdAt = createdAt {
            try container.encode(createdAt, forKey: DynamicCodingKey(stringValue: "created_at"))
        }
        if let updatedAt = updatedAt {
            try container.encode(updatedAt, forKey: DynamicCodingKey(stringValue: "updated_at"))
        }
    }
}

// Dynamic coding key –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
struct DynamicCodingKey: CodingKey {
    var stringValue: String
    var intValue: Int?
    
    init(stringValue: String) {
        self.stringValue = stringValue
        self.intValue = nil
    }
    
    init(intValue: Int) {
        self.stringValue = String(intValue)
        self.intValue = intValue
    }
}

// Helper –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Any –≤ Codable
struct AnyCodable: Codable {
    let value: Any
    
    init<T>(_ value: T?) {
        self.value = value ?? ()
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        
        if container.decodeNil() {
            value = ()
        } else if let bool = try? container.decode(Bool.self) {
            value = bool
        } else if let int = try? container.decode(Int.self) {
            value = int
        } else if let double = try? container.decode(Double.self) {
            value = double
        } else if let string = try? container.decode(String.self) {
            value = string
        } else if let array = try? container.decode([AnyCodable].self) {
            value = array.map { $0.value }
        } else if let dict = try? container.decode([String: AnyCodable].self) {
            value = dict.mapValues { $0.value }
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "AnyCodable value cannot be decoded")
        }
    }
    
    func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        
        switch value {
        case is Void:
            try container.encodeNil()
        case let bool as Bool:
            try container.encode(bool)
        case let int as Int:
            try container.encode(int)
        case let double as Double:
            try container.encode(double)
        case let string as String:
            try container.encode(string)
        default:
            let context = EncodingError.Context(codingPath: container.codingPath, debugDescription: "AnyCodable value cannot be encoded")
            throw EncodingError.invalidValue(value, context)
        }
    }
}

// MARK: - Hashable conformance
extension DataRecord {
    func hash(into hasher: inout Hasher) {
        hasher.combine(id)
    }
    
    static func == (lhs: DataRecord, rhs: DataRecord) -> Bool {
        return lhs.id == rhs.id
    }
}
